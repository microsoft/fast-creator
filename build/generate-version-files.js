const fs = require("fs");
const path = require("path");

const fastToolingChangelog = require("@microsoft/fast-tooling/CHANGELOG.json");
const fastToolingReactChangelog = require("@microsoft/fast-tooling-react/CHANGELOG.json");
const fastCreatorChangelog = require("../CHANGELOG.json");

/**
 * This script is to be run during build time for the app, creating files from
 * the JSON changelog files generated by beachball.
 * 
 * The outputted files should include:
 * - [current-version] A file containing the current version
 * - [package-changes] Files for each version and each package that contain information about
 *   the last 20 changes, this will ensure that only the most recent changes are included
 * 
 * The [current-version] file format should be:
 * 
 * current-version.json
 * {
 *     "@microsoft/fast-tooling": "0.1.0",
 *     "@microsoft/fast-tooling-react": "2.0.0",
 *     "@microsoft/fast-creator": "0.0.1"
 * }
 * 
 * The [package-changes] file format will use the beachball format, but truncated.
 */

function writeCurrentVersionFile() {
    const fileContents = {
        "@microsoft/fast-tooling": fastToolingChangelog.entries[0].version,
        "@microsoft/fast-tooling-react": fastToolingReactChangelog.entries[0].version,
        "@microsoft/fast-creator": fastCreatorChangelog.entries[0].version,
    };

    fs.writeFileSync(
        path.resolve(__dirname, "../app/generated/current-version.json"),
        JSON.stringify(fileContents)
    );
}

/**
 * Filter out messages that are only bumps to the changelog and standardize the 
 * format of the comment
 */
function filterBumpsOutStandardizeEntryFormat(version) {
    return version.filter((versionEntry) => {
        return versionEntry.comment.slice(0, 4) !== "Bump";
    }).map((versionEntry) => {
        const updatedVersionEntry = versionEntry;
        updatedVersionEntry.comment = `${updatedVersionEntry.comment[0].toUpperCase()}${updatedVersionEntry.comment.substr(1)}`;

        return updatedVersionEntry;
    });
}

function updateEntry(entry) {
    [
        "patch",
        "minor",
        "major"
    ].forEach((version) => {
        if (entry.comments[version]) {
            entry.comments[version] = filterBumpsOutStandardizeEntryFormat(entry.comments[version]);
    
            if (entry.comments[version].length === 0) {
                delete entry.comments[version];
            }
        }
    });

    delete entry.comments.none;

    if (Object.keys(entry.comments).length > 0) {
        return entry;
    }
}

function truncateChangelog(changelog, increment) {
    const truncatedChangelog = changelog;
    truncatedChangelog.entries = truncatedChangelog.entries.slice(0, increment);
    truncatedChangelog.entries = truncatedChangelog.entries.map((entry) => {
        return updateEntry(entry);
    }).filter((entry) => {
        return !!entry && Object.keys(entry.comments).length > 0;
    });

    return truncatedChangelog;
}

function writePackageChangeFiles() {
    const increment = 20;

    let truncatedFastToolingChangelog = truncateChangelog(fastToolingChangelog, increment);
    let truncatedFastToolingReactChangelog = truncateChangelog(fastToolingReactChangelog, increment);
    let truncatedFastCreatorChangelog = truncateChangelog(fastCreatorChangelog, increment);

    fs.writeFileSync(
        path.resolve(__dirname, "../app/generated/fast-tooling-package-changes.json"),
        JSON.stringify(truncatedFastToolingChangelog)
    );

    fs.writeFileSync(
        path.resolve(__dirname, "../app/generated/fast-tooling-react-package-changes.json"),
        JSON.stringify(truncatedFastToolingReactChangelog)
    );

    fs.writeFileSync(
        path.resolve(__dirname, "../app/generated/fast-creator-package-changes.json"),
        JSON.stringify(truncatedFastCreatorChangelog)
    );
}

writeCurrentVersionFile();
writePackageChangeFiles();
